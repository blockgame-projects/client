name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew clean jar

      - name: Read Gradle computed version
        id: ver
        run: |
          V=$(./gradlew -q printVersion)
          echo "version=$V" >> "$GITHUB_OUTPUT"
          ISDEV=$(./gradlew -q printIsDev)
          echo "isdev=$ISDEV" >> "$GITHUB_OUTPUT"

      - name: Compute tag, name, prerelease
        id: meta
        run: |
          if [ "${{ steps.ver.outputs.isdev }}" = "true" ]; then
            # dev build -> prerelease
            TAG="v${{ steps.ver.outputs.version }}"
            NAME="${TAG} (preview)"
            PRERELEASE=true
          else
            # full release
            # strip any -<sha> if present (it won't be, but safe)
            CLEAN="${{ steps.ver.outputs.version }}"
            CLEAN="${CLEAN%%-*}"
            TAG="v${CLEAN}"
            NAME="${TAG}"
            PRERELEASE=false
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Find built jar
        id: jar
        shell: bash
        run: |
          FILE=$(ls build/libs/*.jar | head -n1)
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "basename=$(basename "$FILE")" >> "$GITHUB_OUTPUT"

      - name: Capture commit message
        id: msg
        run: |
          # Works on push; fallback to git log otherwise
          MSG="${{ github.event.head_commit.message }}"
          if [ -z "$MSG" ]; then MSG="$(git log -1 --pretty=%s)"; fi
          # Escape % and newlines for YAML-safe output
          MSG="${MSG//'%'/'%25'}"
          MSG="${MSG//$'\n'/'%0A'}"
          MSG="${MSG//$'\r'/'%0D'}"
          echo "body=$MSG" >> "$GITHUB_OUTPUT"

      - name: Create Release & Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          body: "${{ steps.msg.outputs.body }}"
          prerelease: ${{ steps.meta.outputs.prerelease }}
          files: ${{ steps.jar.outputs.file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}