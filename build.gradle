plugins {
    id 'java'
    id 'application'
    id("io.freefair.lombok") version "8.13.1"
    id("com.osmerion.lwjgl3") version "0.5.0"
}

// Creates the SHA Commit Hash
def gitSha = { ->
    try {
        def p = "git rev-parse --short HEAD".execute()
        p.waitFor()
        return p.exitValue() == 0 ? p.in.text.trim() : "unknown"
    } catch (ignored) {
        return "unknown"
    }
}()

// Check if we are in dev mode
def isDev = (project.findProperty("dev") ?: "true").toString().toBoolean()

group = 'com.james090500'
version = isDev ? "${project.version}-${gitSha}" : "${project.version}"

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}


repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation 'io.netty:netty-all:4.2.5.Final'
    implementation "org.joml:joml:1.10.8"
    implementation 'org.lz4:lz4-java:1.8.0'
}

lwjgl3 {
    targets.named("main") {
        // Modules
        modules.add("lwjgl")
        modules.add("lwjgl-glfw")
        modules.add("lwjgl-opengl")
        modules.add("lwjgl-stb")
        modules.add("lwjgl-nanovg")
        modules.add("lwjgl-openal")

        // Platforms (includes natives for each target)
        macosARM64()
        macosX64()
        windowsX64()
        linuxX64()
    }
}

// Builds the JAr
tasks.withType(Jar).configureEach {
    archiveBaseName.set(project.findProperty("archivesBaseName") ?: project.name)
    archiveVersion.set(project.version) // already includes -<sha> when dev=true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
}

/** Tiny helper tasks for CI */
tasks.register("printVersion") {
    doLast { println project.version }
}
tasks.register("printIsDev") {
    doLast { println isDev ? "true" : "false" }
}

tasks.register("generateAssetManifest") {
    def inputDir = file("src/main/resources/assets")
    def outputFile = file("src/main/resources/assets.txt")

    doLast {
        if (!inputDir.exists()) return
        def lines = []
        inputDir.eachFileRecurse { file ->
            if (file.isFile()) {
                def relativePath = file.path - inputDir.path - File.separator
                lines << relativePath.replace(File.separator, "/")
            }
        }
        outputFile.text = lines.join("\n")
        println "Generated files.txt with ${lines.size()} entries"
    }
}

// Make sure this runs before processing resources
processResources.dependsOn(tasks.generateAssetManifest)